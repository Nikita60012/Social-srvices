<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>